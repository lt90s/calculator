// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator.proto

package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CalculatorParameter_OperatorCode int32

const (
	CalculatorParameter_ADD      CalculatorParameter_OperatorCode = 0
	CalculatorParameter_MINUS    CalculatorParameter_OperatorCode = 1
	CalculatorParameter_MULTIPLY CalculatorParameter_OperatorCode = 2
	CalculatorParameter_DIVIDE   CalculatorParameter_OperatorCode = 3
)

var CalculatorParameter_OperatorCode_name = map[int32]string{
	0: "ADD",
	1: "MINUS",
	2: "MULTIPLY",
	3: "DIVIDE",
}
var CalculatorParameter_OperatorCode_value = map[string]int32{
	"ADD":      0,
	"MINUS":    1,
	"MULTIPLY": 2,
	"DIVIDE":   3,
}

func (x CalculatorParameter_OperatorCode) String() string {
	return proto.EnumName(CalculatorParameter_OperatorCode_name, int32(x))
}
func (CalculatorParameter_OperatorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_calculator_562e11ecdd1794cd, []int{0, 0}
}

type CalculatorParameter struct {
	OperandA             float64                          `protobuf:"fixed64,1,opt,name=operandA" json:"operandA,omitempty"`
	OperandB             float64                          `protobuf:"fixed64,2,opt,name=operandB" json:"operandB,omitempty"`
	OperCode             CalculatorParameter_OperatorCode `protobuf:"varint,3,opt,name=operCode,enum=calculator.CalculatorParameter_OperatorCode" json:"operCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CalculatorParameter) Reset()         { *m = CalculatorParameter{} }
func (m *CalculatorParameter) String() string { return proto.CompactTextString(m) }
func (*CalculatorParameter) ProtoMessage()    {}
func (*CalculatorParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_562e11ecdd1794cd, []int{0}
}
func (m *CalculatorParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorParameter.Unmarshal(m, b)
}
func (m *CalculatorParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorParameter.Marshal(b, m, deterministic)
}
func (dst *CalculatorParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorParameter.Merge(dst, src)
}
func (m *CalculatorParameter) XXX_Size() int {
	return xxx_messageInfo_CalculatorParameter.Size(m)
}
func (m *CalculatorParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorParameter.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorParameter proto.InternalMessageInfo

func (m *CalculatorParameter) GetOperandA() float64 {
	if m != nil {
		return m.OperandA
	}
	return 0
}

func (m *CalculatorParameter) GetOperandB() float64 {
	if m != nil {
		return m.OperandB
	}
	return 0
}

func (m *CalculatorParameter) GetOperCode() CalculatorParameter_OperatorCode {
	if m != nil {
		return m.OperCode
	}
	return CalculatorParameter_ADD
}

type CalculatorResult struct {
	Result               float64  `protobuf:"fixed64,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculatorResult) Reset()         { *m = CalculatorResult{} }
func (m *CalculatorResult) String() string { return proto.CompactTextString(m) }
func (*CalculatorResult) ProtoMessage()    {}
func (*CalculatorResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_562e11ecdd1794cd, []int{1}
}
func (m *CalculatorResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorResult.Unmarshal(m, b)
}
func (m *CalculatorResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorResult.Marshal(b, m, deterministic)
}
func (dst *CalculatorResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorResult.Merge(dst, src)
}
func (m *CalculatorResult) XXX_Size() int {
	return xxx_messageInfo_CalculatorResult.Size(m)
}
func (m *CalculatorResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorResult.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorResult proto.InternalMessageInfo

func (m *CalculatorResult) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*CalculatorParameter)(nil), "calculator.CalculatorParameter")
	proto.RegisterType((*CalculatorResult)(nil), "calculator.CalculatorResult")
	proto.RegisterEnum("calculator.CalculatorParameter_OperatorCode", CalculatorParameter_OperatorCode_name, CalculatorParameter_OperatorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculateServicerClient is the client API for CalculateServicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculateServicerClient interface {
	Calculate(ctx context.Context, in *CalculatorParameter, opts ...grpc.CallOption) (*CalculatorResult, error)
	StreamCalculate(ctx context.Context, opts ...grpc.CallOption) (CalculateServicer_StreamCalculateClient, error)
}

type calculateServicerClient struct {
	cc *grpc.ClientConn
}

func NewCalculateServicerClient(cc *grpc.ClientConn) CalculateServicerClient {
	return &calculateServicerClient{cc}
}

func (c *calculateServicerClient) Calculate(ctx context.Context, in *CalculatorParameter, opts ...grpc.CallOption) (*CalculatorResult, error) {
	out := new(CalculatorResult)
	err := c.cc.Invoke(ctx, "/calculator.CalculateServicer/calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateServicerClient) StreamCalculate(ctx context.Context, opts ...grpc.CallOption) (CalculateServicer_StreamCalculateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculateServicer_serviceDesc.Streams[0], "/calculator.CalculateServicer/streamCalculate", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculateServicerStreamCalculateClient{stream}
	return x, nil
}

type CalculateServicer_StreamCalculateClient interface {
	Send(*CalculatorParameter) error
	Recv() (*CalculatorResult, error)
	grpc.ClientStream
}

type calculateServicerStreamCalculateClient struct {
	grpc.ClientStream
}

func (x *calculateServicerStreamCalculateClient) Send(m *CalculatorParameter) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculateServicerStreamCalculateClient) Recv() (*CalculatorResult, error) {
	m := new(CalculatorResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculateServicerServer is the server API for CalculateServicer service.
type CalculateServicerServer interface {
	Calculate(context.Context, *CalculatorParameter) (*CalculatorResult, error)
	StreamCalculate(CalculateServicer_StreamCalculateServer) error
}

func RegisterCalculateServicerServer(s *grpc.Server, srv CalculateServicerServer) {
	s.RegisterService(&_CalculateServicer_serviceDesc, srv)
}

func _CalculateServicer_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatorParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServicerServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculateServicer/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServicerServer).Calculate(ctx, req.(*CalculatorParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculateServicer_StreamCalculate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculateServicerServer).StreamCalculate(&calculateServicerStreamCalculateServer{stream})
}

type CalculateServicer_StreamCalculateServer interface {
	Send(*CalculatorResult) error
	Recv() (*CalculatorParameter, error)
	grpc.ServerStream
}

type calculateServicerStreamCalculateServer struct {
	grpc.ServerStream
}

func (x *calculateServicerStreamCalculateServer) Send(m *CalculatorResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculateServicerStreamCalculateServer) Recv() (*CalculatorParameter, error) {
	m := new(CalculatorParameter)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CalculateServicer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculateServicer",
	HandlerType: (*CalculateServicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "calculate",
			Handler:    _CalculateServicer_Calculate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamCalculate",
			Handler:       _CalculateServicer_StreamCalculate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}

func init() { proto.RegisterFile("calculator.proto", fileDescriptor_calculator_562e11ecdd1794cd) }

var fileDescriptor_calculator_562e11ecdd1794cd = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x5d, 0x65, 0xe4, 0x12, 0x76, 0x86, 0x73, 0x03, 0x12, 0x8b, 0x12, 0x73, 0x53, 0x4b, 0x52,
	0x8b, 0x84, 0xa4, 0xb8, 0x38, 0xf2, 0x0b, 0x52, 0x8b, 0x12, 0xf3, 0x52, 0x1c, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x18, 0x83, 0xe0, 0x7c, 0x24, 0x39, 0x27, 0x09, 0x26, 0x14, 0x39, 0x27, 0x21, 0x0f,
	0x88, 0x9c, 0x73, 0x7e, 0x4a, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0x8e, 0x1e, 0x92,
	0x03, 0xb0, 0x58, 0xa5, 0xe7, 0x0f, 0xd2, 0x5b, 0x92, 0x0f, 0xd6, 0x13, 0x04, 0xd7, 0xad, 0x64,
	0xc3, 0xc5, 0x83, 0x2c, 0x23, 0xc4, 0xce, 0xc5, 0xec, 0xe8, 0xe2, 0x22, 0xc0, 0x20, 0xc4, 0xc9,
	0xc5, 0xea, 0xeb, 0xe9, 0x17, 0x1a, 0x2c, 0xc0, 0x28, 0xc4, 0xc3, 0xc5, 0xe1, 0x1b, 0xea, 0x13,
	0xe2, 0x19, 0xe0, 0x13, 0x29, 0xc0, 0x24, 0xc4, 0xc5, 0xc5, 0xe6, 0xe2, 0x19, 0xe6, 0xe9, 0xe2,
	0x2a, 0xc0, 0xac, 0xa4, 0xc5, 0x25, 0x80, 0xb0, 0x2b, 0x28, 0xb5, 0xb8, 0x34, 0xa7, 0x44, 0x48,
	0x8c, 0x8b, 0xad, 0x08, 0xcc, 0x82, 0xfa, 0x08, 0xca, 0x33, 0xda, 0xc9, 0xc8, 0x25, 0x08, 0x53,
	0x9c, 0x1a, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x5a, 0x24, 0xe4, 0xc3, 0xc5, 0x09, 0x73, 0x78,
	0xaa, 0x90, 0x3c, 0x01, 0x4f, 0x48, 0xc9, 0x60, 0x57, 0x00, 0xb1, 0x59, 0x89, 0x41, 0x28, 0x8c,
	0x8b, 0xbf, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0xd7, 0x99, 0x6a, 0x66, 0x6a, 0x30, 0x1a, 0x30, 0x26,
	0xb1, 0x81, 0xa3, 0xd4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x95, 0xa9, 0x90, 0x62, 0xe6, 0x01,
	0x00, 0x00,
}
